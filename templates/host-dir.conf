# DO NOT EDIT - Managed by Puppet
#
# Bacula Director Per-Host Configuration
#   for <%= safe_client_hostname %>
#   via <%= safe_director_name -%>:director (<%= safe_director_hostname -%>)
#    to <%= safe_storage_name -%>:storage:<%= safe_client_name -%> (<%= safe_storage_hostname -%>)
#
# These files will be important dynamically by bacula-dir.conf when
# put into the /etc/bacula/bacula-dir.d directory.

# Configure our client so that the Director can contact it
Client {
  Name = "<%= safe_client_hostname -%>"
  Password = "<%= bacula_server_password -%>"
  Address = <%= safe_client_hostname %>
  # This will be managed by the default catalog
  Catalog = "<%= safe_director_name -%>:sqlite"
  # Any files backed up will only be kept for maximum of
  # around 1 month, so we'll set retention of that information
  # to a maximum of 6 weeks
  File Retention = 6 Weeks
  # However, we'll keep a log of all the work done on the server
  # for around a year so we can keep an eye on it and see
  # general progression or changes over time.
  Job Retention = 1 Year
  # Get rid of any data or files as they expire.
  AutoPrune = Yes
}

# Each client will have a dedicated Device on the Storage Daemon,
# so that we can support concurrent backups and have dedicated
# space for it's volumes (which will be managed by the Pools below)
Storage {
  Name = "<%= safe_storage_name -%>:storage:<%= safe_client_name -%>"
  Address = <%= safe_storage_hostname %>
  Password  = "<%= bacula_server_password -%>"
  Device = "<%= safe_client_hostname -%>"
  Media Type = File
}

# Create the Job which will back up this client and set the schedule
Job {
  Name = "<%= safe_client_hostname -%>"
  Priority = <%= safe_priority %>
  JobDefs = "Basic:<%= safe_backup_dohome -%>:on<%= safe_backup_onday.capitalize -%>"
  Client = "<%= safe_client_hostname -%>"
  # Override the defaults for this Job so that it goes to the correct
  # Storage Daemon and uses the correct pool for naming and volume
  # management (retention, pruning & recycling)
  Storage = "<%= safe_storage_name -%>:storage:<%= safe_client_name -%>"
  Full Backup Pool = "<%= safe_storage_name -%>:pool:<%= safe_client_name -%>:weekly"
  Differential Backup Pool = "<%= safe_storage_name -%>:pool:<%= safe_client_name -%>:weekly"
  Incremental Backup Pool = "<%= safe_storage_name -%>:pool:<%= safe_client_name -%>:daily"
}

# Create two pools of Volumes to work with: One will be for Weekly
# backups, which we'll keep a months worth, and Daily, those kept for a week.
Pool {
  Name = "<%= safe_storage_name -%>:pool:<%= safe_client_name -%>:weekly"
  # All Volumes will have the format hostname.type.date.time to ensure they
  # are kept unique throughout the operation and also aid quick analysis
  Label Format = "<%= safe_client_hostname.split('.').reverse.join('.') -%>.weekly.${Year}${Month:p/2/0/r}${Day:p/2/0/r}.${Hour:p/2/0/r}${Minute:p/2/0/r}"
  Pool Type = Backup
  # Keep using Volumes as they expire, and delete the ones
  # that are no longer required or expire.
  Recycle = Yes
  Autoprune = Yes
  Volume Retention = 1 Month
  # For Weekly Backups, we want to keep 5 copies: A Full backup
  # is done monthly, and upto 4 differential backups through
  # the course of the rest of the month.
  Maximum Volumes = 5
  # A Volume should not be appended; either created when
  # needed or overwritten when too old
  Use Volume Once = Yes
}

Pool {
  Name = "<%= safe_storage_name -%>:pool:<%= safe_client_name -%>:daily"
  Label Format = "<%= safe_client_hostname.split('.').reverse.join('.') -%>-daily.${Year}${Month:p/2/0/r}${Day:p/2/0/r}.${Hour:p/2/0/r}${Minute:p/2/0/r}"
  Pool Type = Backup
  Recycle = yes
  Autoprune = yes
  # Like weekly backups, we'll move through a set number
  # of volumes, which should be no more than 7 days old
  # and we need no more than 6 of them (7th day is the full
  # backup)
  Volume Retention = 7 Days
  Maximum Volumes = 6
  # Again, create or overwrite, not append.
  Use Volume Once = Yes
}
